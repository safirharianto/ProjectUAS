package org.yourorghere;

import com.sun.opengl.util.Animator;
import com.sun.opengl.util.texture.Texture;
import com.sun.opengl.util.texture.TextureIO;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import javax.media.opengl.GL;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.glu.GLU;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;


public class Hidrolik2 implements GLEventListener, MouseListener, MouseMotionListener,KeyListener {
    
    public static void main(String[] args) {
        Frame frame = new Frame("SIMULASI HIDROLIK");
        GLCanvas canvas = new GLCanvas();
        
        canvas.addGLEventListener(new Hidrolik2());
        canvas.addKeyListener(new Hidrolik2());
        
        
        frame.add(canvas);
        frame.setSize(1024, 480);
        final Animator animator = new Animator(canvas);
        frame.addWindowListener(new WindowAdapter() {
            
            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {
                    
                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
        // Center frame
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        animator.start();
    }
    public static Texture texture, Tair;
    public static double kurangi = 0;
    String url_texture = "D:\\JOGL Texture" + "\\";
    
    private float view_rotx = 0.0f;
    private float view_roty = 0.0f;
    private int oldMouseX;
    private int oldMouseY;
    
    public void init(GLAutoDrawable drawable) {
        // Use debug pipeline
        // drawable.setGL(new DebugGL(drawable.getGL()));

        GL gl = drawable.getGL();
        System.err.println("INIT GL IS: " + gl.getClass().getName());
        
        try {
            texture = TextureIO.newTexture(
                    new File("D:\\KULIAH\\SMT 8\\Image\\tekstur_besi.jpg"),
                    true);
            Tair = TextureIO.newTexture(
                    new File("D:\\KULIAH\\SMT 8\\Image\\tekstur_air.jpg"),
                    true);
        } catch (IOException e) {
            System.out.println("");
        }

        // Enable VSync
        gl.setSwapInterval(1);

        // Setup the drawing area and shading mode
        gl.glClearColor(1.0f, 1.0f, 1.0f, 0.0f);
        gl.glShadeModel(GL.GL_SMOOTH); // try setting this to GL_FLAT and see what happens.
        gl.glEnable(GL.GL_BLEND);
        gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE);
        
        drawable.addMouseListener(this);
        drawable.addMouseMotionListener(this);
    }
    
    public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {
        GL gl = drawable.getGL();
        GLU glu = new GLU();
        
        if (height <= 0) { // avoid a divide by zero error!

            height = 1;
        }
        final float h = (float) width / (float) height;
        gl.glViewport(0, 0, width, height);
        gl.glMatrixMode(GL.GL_PROJECTION);
        gl.glLoadIdentity();
        glu.gluPerspective(45.0f, h, 1.0, 80.0);
        gl.glMatrixMode(GL.GL_MODELVIEW);
        gl.glLoadIdentity();
    }
    
    static double sudut = 0;
    public static double tambah = 0;
    public static double kurangi2 = 0, kurangi3 = 0;
//    static Texture pistonKecil, pistonBesar;

    public void display(GLAutoDrawable drawable) {
        GL gl = drawable.getGL();
        GLU glu = new GLU();
        gl.glEnable(GL.GL_DEPTH_TEST);
        // Clear the drawing area
        gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
        // Reset the current matrix to the "identity"
        gl.glLoadIdentity();
        gl.glEnable(GL.GL_BLEND);
//        glu.gluLookAt(0, 3,12,
//                0, 0, 0,
//                0, 1, 0);

        gl.glRotatef(view_rotx, 1.0f, 0.0f, 0.0f);
        gl.glRotatef(view_roty, 0.0f, 1.0f, 0.0f);
        
        gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE_MINUS_SRC_ALPHA);

        //sudut += 1;
        if (kurangi <= 0.5) {
            kurangi += 0.005;
        }
        // Move the "drawing cursor" around
        gl.glTranslatef(-0f, -2.0f, -15f);
        
        gl.glRotated(sudut, 0, 1, 0);
//        gl.glTranslated(-2.5, -1, -5);
//        gl.glRotated(sudut, 0, 1, 0);

        gl.glPushMatrix();
        gl.glTranslated(-3.1, 0, 0.7);
        IsiBejana.isiBejana(gl); //
        gl.glPopMatrix();
        
        gl.glTranslated(-4.05, 0.5, -0.025);
        texture.enable();
        texture.bind();
        gl.glPushMatrix();

        //gl.glColor3d(0, 0, 1);
        gl.glColor4f(0f, 1f, 1f, 0.2f);
        Tengah.Balokisi(gl);
        gl.glPopMatrix();
        texture.disable();
        
        gl.glPushMatrix();
        //gl.glColor3d(0, 1, 0);
        gl.glColor4f(0f, 1f, 1f, 0.2f);
        gl.glTranslated(0, 1, 0);
//        gl.glRotated(sudut, 0, 1, 0);

        Kiri.Balokkiri(gl);
        gl.glPopMatrix();
        
        gl.glPushMatrix();
        gl.glTranslated(0, 2.6, 0);
        //gl.glColor3d(0, 0, 1);
        gl.glColor4f(0f, 1f, 1f, 0.2f);
//        gl.glRotated(sudut, 1, 0, 0);
        if ((kurangi2 <= 0.3)) {
            kurangi2 += 0.005;
        }
        gl.glTranslated(0, 0 - kurangi, 0);
        gl.glColor3d(0, 0, 1);
        Kiri.Pendorong(gl);
        gl.glPopMatrix();
        
        gl.glPushMatrix();
        gl.glTranslated(6.1, 0.51, 1);
        //gl.glColor3d(0, 1, 0);
        gl.glColor4f(0f, 1f, 1f, 0.2f);
//          gl.glRotated(sudut, 0, 1, 0);

        //Kanan.Balokkanan(gl);
        IsiBejana.baloknoTex(gl, 2.4, 1.6, 1.5);
        gl.glPopMatrix();
        
        gl.glPushMatrix();
        gl.glTranslated(6.5, 2.3, 0);
        gl.glColor3d(0, 0, 1);
//        gl.glRotated(sudut, 1, 0, 0);
        //kanan biru
        if ((tambah <= 0.45)) {
            tambah += 0.005;
        }
        gl.glTranslated(0, -0.3 + tambah, 0);
        Kanan.Pendorong(gl);
        gl.glPopMatrix();
        
        gl.glPushMatrix();
        gl.glTranslated(6.5, 3, 0);
        gl.glColor3d(0.2, 0.2, 0.5);
        //atas biru
        gl.glTranslated(0, -0.7 + tambah, 0);
        Kanan.Beban(gl);
        gl.glPopMatrix();
        
        double x = 0;
//        for (int i = 0; i < 3; i++) {

        gl.glPushMatrix();
        gl.glColor3d(0, 0, 1);
        gl.glTranslated(-0.5, 2.8, 0.5);
        gl.glRotated(90, 0, 0, 1);
//         gl.glRotated(sudut, 0, 1, 0);
        gl.glTranslated(-0.5 - kurangi, 0, 0);
        Kanan.Pompa(gl);
        Kanan.Pompabawah(gl);
        gl.glPopMatrix();
        
        x = (x + 0.5);
//        }
// Flush all drawing operations to the graphics card

        gl.glFlush();
    }
    
    public void displayChanged(GLAutoDrawable drawable, boolean modeChanged, boolean deviceChanged) {
    }
    
    @Override
    public void mouseClicked(MouseEvent me) {
        
    }
    
    @Override
    public void mousePressed(MouseEvent me) {
        oldMouseX = me.getX();
        oldMouseY = me.getY();
        
    }
    
    @Override
    public void mouseReleased(MouseEvent me) {
        
    }
    
    @Override
    public void mouseEntered(MouseEvent me) {
        
    }
    
    @Override
    public void mouseExited(MouseEvent me) {
        
    }
    
    @Override
    public void mouseDragged(MouseEvent me) {
        int x = me.getX();
        int y = me.getY();
        Dimension size = me.getComponent().getSize();
        float thetaY = 360.0f * ((float) (x - oldMouseX) / (float) size.width);
        float thetaX = 360.0f * ((float) (oldMouseY - y) / (float) size.height);
        oldMouseX = x;
        oldMouseY = y;
        view_rotx += thetaX;
        view_roty += thetaY;
        
    }
    
    @Override
    public void mouseMoved(MouseEvent me) {
        
    }

    @Override
    public void keyTyped(KeyEvent ke) {
        
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        System.out.println(ke.getKeyCode());
        if (ke.getKeyCode()==37) {
            sudut -= 1f;
        }
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        
    }
    
}
